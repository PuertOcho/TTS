#!/usr/bin/env python3
"""
Script de verificaci√≥n r√°pida para el sistema de comparaci√≥n TTS
Verifica que todos los componentes est√©n listos antes de la comparaci√≥n completa
"""

import os
import sys
import subprocess
from pathlib import Path

def check_python_deps():
    """Verifica dependencias de Python"""
    try:
        import requests
        import psutil
        print("‚úÖ Dependencias Python: OK")
        return True
    except ImportError as e:
        print(f"‚ùå Dependencias Python faltantes: {e}")
        print("   Ejecuta: pip install -r requirements_comparison.txt")
        return False

def check_docker():
    """Verifica Docker"""
    try:
        result = subprocess.run(['docker', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ Docker: {result.stdout.strip()}")
            return True
        else:
            print("‚ùå Docker no disponible")
            return False
    except:
        print("‚ùå Docker no instalado")
        return False

def check_docker_compose():
    """Verifica Docker Compose"""
    try:
        result = subprocess.run(['docker', 'compose', 'version'], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ Docker Compose: OK")
            return True
        else:
            print("‚ùå Docker Compose no disponible")
            return False
    except:
        print("‚ùå Docker Compose no disponible")
        return False

def check_gpu():
    """Verifica GPU NVIDIA"""
    try:
        result = subprocess.run(['nvidia-smi'], capture_output=True, text=True)
        if result.returncode == 0:
            # Extraer informaci√≥n b√°sica
            lines = result.stdout.split('\n')
            for line in lines:
                if 'Driver Version' in line:
                    print(f"‚úÖ GPU NVIDIA: {line.strip()}")
                    return True
            print("‚úÖ GPU NVIDIA: Disponible")
            return True
        else:
            print("‚ö†Ô∏è GPU NVIDIA: No disponible (usar√° CPU)")
            return False
    except:
        print("‚ö†Ô∏è GPU NVIDIA: No disponible (usar√° CPU)")
        return False

def check_directories():
    """Verifica estructura de directorios"""
    required_dirs = [
        "azure-tts-ms",
        "f5-tts-ms", 
        "kokoro-tts-ms",
        "xtts-v2-tts-ms"
    ]
    
    missing = []
    for dir_name in required_dirs:
        if not Path(dir_name).is_dir():
            missing.append(dir_name)
    
    if missing:
        print(f"‚ùå Directorios faltantes: {', '.join(missing)}")
        return False
    else:
        print("‚úÖ Estructura de directorios: OK")
        return True

def check_ports():
    """Verifica puertos libres"""
    import socket
    
    ports = [5001, 5002, 5004, 5005]
    busy_ports = []
    
    for port in ports:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex(('localhost', port))
        sock.close()
        
        if result == 0:  # Puerto ocupado
            busy_ports.append(port)
    
    if busy_ports:
        print(f"‚ö†Ô∏è Puertos ocupados: {busy_ports}")
        print("   El script intentar√° detener servicios autom√°ticamente")
        return True  # No es cr√≠tico, se puede manejar
    else:
        print("‚úÖ Puertos libres: OK")
        return True

def check_disk_space():
    """Verifica espacio en disco"""
    import shutil
    
    free_bytes = shutil.disk_usage('.').free
    free_gb = free_bytes / (1024**3)
    
    if free_gb >= 2:
        print(f"‚úÖ Espacio en disco: {free_gb:.1f} GB disponibles")
        return True
    else:
        print(f"‚ö†Ô∏è Espacio en disco bajo: {free_gb:.1f} GB disponibles")
        print("   Se recomienda al menos 2GB libres")
        return free_gb >= 1  # M√≠nimo 1GB

def main():
    print("üîç VERIFICACI√ìN DEL SISTEMA PARA COMPARACI√ìN TTS")
    print("=" * 50)
    
    checks = [
        ("Dependencias Python", check_python_deps),
        ("Docker", check_docker),
        ("Docker Compose", check_docker_compose),
        ("GPU NVIDIA", check_gpu),
        ("Estructura de directorios", check_directories),
        ("Puertos disponibles", check_ports),
        ("Espacio en disco", check_disk_space)
    ]
    
    results = []
    
    for name, check_func in checks:
        try:
            result = check_func()
            results.append(result)
        except Exception as e:
            print(f"‚ùå Error verificando {name}: {e}")
            results.append(False)
    
    print("\n" + "=" * 50)
    
    critical_checks = results[:5]  # Los primeros 5 son cr√≠ticos
    optional_checks = results[5:]  # Los √∫ltimos son opcionales
    
    if all(critical_checks):
        print("üéâ ¬°SISTEMA LISTO PARA COMPARACI√ìN!")
        print("   Puedes ejecutar: ./run_tts_comparison.sh")
        
        if not all(optional_checks):
            print("\n‚ö†Ô∏è Advertencias menores detectadas (no cr√≠ticas)")
        
        return True
    else:
        print("‚ùå SISTEMA NO EST√Å LISTO")
        print("   Corrige los errores cr√≠ticos antes de continuar")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
